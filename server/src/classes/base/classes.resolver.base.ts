/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Classes } from "./Classes";
import { ClassesCountArgs } from "./ClassesCountArgs";
import { ClassesFindManyArgs } from "./ClassesFindManyArgs";
import { ClassesFindUniqueArgs } from "./ClassesFindUniqueArgs";
import { CreateClassesArgs } from "./CreateClassesArgs";
import { UpdateClassesArgs } from "./UpdateClassesArgs";
import { DeleteClassesArgs } from "./DeleteClassesArgs";
import { ClassesService } from "../classes.service";
@graphql.Resolver(() => Classes)
export class ClassesResolverBase {
  constructor(protected readonly service: ClassesService) {}

  async _classesItemsMeta(
    @graphql.Args() args: ClassesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Classes])
  async classesItems(
    @graphql.Args() args: ClassesFindManyArgs
  ): Promise<Classes[]> {
    return this.service.classesItems(args);
  }

  @graphql.Query(() => Classes, { nullable: true })
  async classes(
    @graphql.Args() args: ClassesFindUniqueArgs
  ): Promise<Classes | null> {
    const result = await this.service.classes(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Classes)
  async createClasses(
    @graphql.Args() args: CreateClassesArgs
  ): Promise<Classes> {
    return await this.service.createClasses({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Classes)
  async updateClasses(
    @graphql.Args() args: UpdateClassesArgs
  ): Promise<Classes | null> {
    try {
      return await this.service.updateClasses({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Classes)
  async deleteClasses(
    @graphql.Args() args: DeleteClassesArgs
  ): Promise<Classes | null> {
    try {
      return await this.service.deleteClasses(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
